(load "init.repl")


(interface calculator-interface
    (defun add:decimal (x:decimal y:decimal)
      @doc "Adds two numbers together"
    )

    (defschema number-values
		@doc "stores number values"
		name:string
		value:decimal
	)
)
(begin-tx)
(env-data {
    "gov": {
        "keys": ["test"],
        "pred": "keys-all"
    },
    "cal": {
        "keys": ["cal-test"],
        "pred": "keys-all"
    }
})

(namespace 'free)
(define-keyset "free.gov" (read-keyset "gov"))
(define-keyset "free.cal" (read-keyset "cal"))

(module mod5 GOV
    
    
    
; This was added
    @model [
        (defproperty is-valid-number(x:decimal)
        (or (> x 0.0) (= x 0.0))
        )
    ]

;For Jordan I moved this up here and removed account:string
   ; Calculator Functions
  (defun add:decimal (x:decimal y:decimal)
  ;Remove (require-capability (CAL account))
    (+ x y)
  )

  (defcap GOV ()
	(enforce-guard (keyset-ref-guard "free.gov"))
    )

    (defcap CAL (account:string)
    "Capability to enforce calculator access."
    (with-read g account {"guard" := guard}
      (enforce-one "At least one guard must be satisfied"
        [(enforce-guard (keyset-ref-guard "free.cal"))
         (enforce-guard guard)]))
    )
    
    (defschema guard-schema
        account:string
        guard:guard
    )

    (deftable g:{guard-schema})

    (deftable numbers:{number-values})
; For Jordan Make sure number-values is here
    (defschema number-values
		@doc "stores number values"
		name:string
		value:decimal
	)

; Guard Testing
(defun add-g (account:string guard:guard)
 @doc "Add new guard to the table"
 (insert g account
    {'account: account, 'guard: guard}
    )
)

(defun get-g (account:string)
 @doc "Returns the account guard stored in our table"
(read g account)
)

 ; For Jordan, I removed account:string and account from value:decimal (add x y account)
(defun add-write (x:decimal y:decimal name:string)
    ; Remove (with-capability (CAL account)
        (let (
            (value:decimal (add x y))
        )
            (insert numbers name
                {
                 'name: name
                ,'value:value
                }
                )
            )
   ; Remove )
)

(defun exception (name:string)
 (enforce-one "Name must be 'test or 'test2"
    [(= name "test")
     (= name "test2")])
 )

 (defun exception1 (name:string)
 (if (or (= name "test")
         (= name "test2"))
    (format "{} is valid" [name])
    (format "{} is invalid" [name])
 ))

(defun get-adds (name:string)
     (read numbers name)
)
)
(create-table mod5.numbers)
(create-table mod5.g)
(commit-tx)
(verify "free.mod5")